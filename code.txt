async function callHuggingFaceAPI() {
  const huggingFaceApiUrl = 'https://api-inference.huggingface.co/models/ehristoforu/dalle-3-xl-v2';
  const huggingFaceHeaders = {
    'Content-Type': 'application/json',
    Authorization: 'Bearer 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',
  };

  try {
    const huggingFaceResponse = await axios.post(huggingFaceApiUrl, workflow.imageToGen, {
      headers: huggingFaceHeaders,
      responseType: 'arraybuffer',
    });

    return huggingFaceResponse.data;
  } catch (error) {
    console.error('Error calling HuggingFace API:', error);
    throw error;
  }
}

async function uploadImageToImgBB(imageData, imgBBApiKey) {
  const imgBBApiUrl = 'https://api.imgbb.com/1/upload';
  const imgBBFormData = new FormData();
  imgBBFormData.append('image', imageData);

  try {
    const imgBBResponse = await axios.post(imgBBApiUrl, imgBBFormData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
      params: {
        key: imgBBApiKey,
      },
    });

    if (imgBBResponse.data && imgBBResponse.data.data && imgBBResponse.data.data.url) {
      return imgBBResponse.data.data.url;
    } else {
      throw new Error('Failed to upload image to ImgBB');
    }
  } catch (error) {
    console.error('Error uploading image to ImgBB:', error);
    throw error;
  }
}

async function createAndUploadImage() {
  try {
    // Call HuggingFace API and get binary data
    const huggingFaceImageData = await callHuggingFaceAPI();

    // Convert binary data to base64
    const base64 = btoa(new Uint8Array(huggingFaceImageData).reduce((data, byte) => data + String.fromCharCode(byte), ''));

    // Upload base64 data to ImgBB
    const imgBBUrl = await uploadImageToImgBB(base64, 'd2387b95439da947f371eb2e2571330b');

    return imgBBUrl;
  } catch (error) {
    console.error('Error creating and uploading image:', error);
  }
}

workflow.imageURL = await createAndUploadImage();
